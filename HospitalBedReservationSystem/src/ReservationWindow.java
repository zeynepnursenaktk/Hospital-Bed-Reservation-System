
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Zeynep Nursena
 */
public class ReservationWindow extends javax.swing.JFrame {
                                                                                                                       //String tipinde veri alan iki tane arrayList oluşturdum

    ArrayList<String> beds = Database.GetData("SELECT id FROM Bed");                                                   //database sınıfında oluşturulan GetData metoduyla 
                                                                                                                       //Bed datadasının id sütunundaki id bilgilerini alıyor.
    ArrayList<String> patients = Database.GetData("SELECT CONCAT(id,'-',name,' ',surname) FROM Patient");              //patients arraylisti ise database'den
                                                                                                                       //id, name ve surname sütunlarındaki bilgilerini alıyor 
                                                                                                                       //CONCAT + operatörü gibi string verileri birleştirme işlemleri için kullanılır.

    /**
     * Creates new form ReservationWindow
     */
    public ReservationWindow() {
        initComponents();
        date();
        times();
        for (String bed : beds) {                                                                                        //For döngümle beds arrayListini dolanıp
            cb_roomBed.addItem(bed);                                                                                     //roomBed combobox ına item olarak ekliyorum.
        }
        for (String patient : patients) {                                                                                //For döngümle patients arrayListini dolanıp
            cb_patients.addItem(patient);                                                                                //patients combobox ına item olarak ekliyorum.
        }

    }

    public void date() {
        Date dt = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String dd = sdf.format(dt);
        lbl_date.setText(dd);
    }

    Timer t;
    SimpleDateFormat st;

    public void times() {

        t = new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date dt = new Date();
                st = new SimpleDateFormat("hh:mm:ss a");
                String tt = st.format(dt);
                lbl_times.setText(tt);

            }
        });
        t.start();
    }

    private void showPopUp(MouseEvent e) {
        popUp.show(this, e.getX(), e.getY());                                                                            // getX ve getY mouse a basılan noktanın koordinatlarını verir. 
        //This ise popup ın görünür olacağı framedir.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUp = new javax.swing.JPopupMenu();
        main = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        panel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnl_patient = new javax.swing.JPanel();
        txt_patient = new javax.swing.JTextField();
        btn_filter = new javax.swing.JButton();
        cb_patients = new javax.swing.JComboBox<>();
        pnl_bed = new javax.swing.JPanel();
        cb_roomBed = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_reservations = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lbl_logo = new javax.swing.JLabel();
        btn_reserveBed = new javax.swing.JButton();
        lbl_selectedBed = new javax.swing.JLabel();
        lbl_cost = new javax.swing.JLabel();
        lbl_floor = new javax.swing.JLabel();
        lbl_type = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_times = new javax.swing.JLabel();
        rbtn_darkMode = new javax.swing.JRadioButton();

        main.setText("Back To Main Menu");
        main.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainActionPerformed(evt);
            }
        });
        popUp.add(main);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        popUp.add(exit);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelMouseReleased(evt);
            }
        });

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnl_patient.setBackground(new java.awt.Color(255, 255, 255));
        pnl_patient.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select a Patient", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 1, 18), new java.awt.Color(35, 119, 166))); // NOI18N
        pnl_patient.setForeground(new java.awt.Color(35, 119, 166));
        pnl_patient.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnl_patient.setPreferredSize(new java.awt.Dimension(326, 120));

        btn_filter.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        btn_filter.setForeground(new java.awt.Color(35, 119, 166));
        btn_filter.setText("Filter");
        btn_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_patientLayout = new javax.swing.GroupLayout(pnl_patient);
        pnl_patient.setLayout(pnl_patientLayout);
        pnl_patientLayout.setHorizontalGroup(
            pnl_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_patientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_patients, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_patientLayout.createSequentialGroup()
                        .addComponent(txt_patient, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(btn_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnl_patientLayout.setVerticalGroup(
            pnl_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_patientLayout.createSequentialGroup()
                .addComponent(cb_patients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(pnl_patientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_patient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_filter))
                .addGap(18, 18, 18))
        );

        jSplitPane1.setTopComponent(pnl_patient);

        pnl_bed.setBackground(new java.awt.Color(255, 255, 255));
        pnl_bed.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select a Room/Bed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 1, 18), new java.awt.Color(35, 119, 166))); // NOI18N
        pnl_bed.setPreferredSize(new java.awt.Dimension(106, 60));

        cb_roomBed.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_roomBedİtemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnl_bedLayout = new javax.swing.GroupLayout(pnl_bed);
        pnl_bed.setLayout(pnl_bedLayout);
        pnl_bedLayout.setHorizontalGroup(
            pnl_bedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_bedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cb_roomBed, 0, 304, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_bedLayout.setVerticalGroup(
            pnl_bedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_bedLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(cb_roomBed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jSplitPane1.setBottomComponent(pnl_bed);

        table_reservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient", "Patient Age", "Bed Type", "Floor", "Days", "Payment"
            }
        ));
        jScrollPane1.setViewportView(table_reservations);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(35, 119, 166));
        jLabel1.setText("CURRENT RESERVATIONS");

        lbl_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/acibadem_white_logo.jpg"))); // NOI18N

        btn_reserveBed.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btn_reserveBed.setForeground(new java.awt.Color(35, 119, 166));
        btn_reserveBed.setText("RESERVE BED");
        btn_reserveBed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reserveBedActionPerformed(evt);
            }
        });

        lbl_selectedBed.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        lbl_selectedBed.setForeground(new java.awt.Color(35, 119, 166));
        lbl_selectedBed.setText("Selected Bed...");

        lbl_cost.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        lbl_cost.setForeground(new java.awt.Color(35, 119, 166));
        lbl_cost.setText("Daily Cost:");

        lbl_floor.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        lbl_floor.setForeground(new java.awt.Color(35, 119, 166));
        lbl_floor.setText("Floor:");

        lbl_type.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        lbl_type.setForeground(new java.awt.Color(35, 119, 166));
        lbl_type.setText("Type:");

        lbl_date.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        lbl_date.setForeground(java.awt.SystemColor.activeCaption);

        lbl_times.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        lbl_times.setForeground(java.awt.SystemColor.activeCaption);

        rbtn_darkMode.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        rbtn_darkMode.setForeground(java.awt.SystemColor.activeCaption);
        rbtn_darkMode.setText("Dark Mode");
        rbtn_darkMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtn_darkModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addComponent(btn_reserveBed, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_floor, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_cost, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_type, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_selectedBed, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(355, 355, 355))))
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(lbl_times, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_logo, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtn_darkMode)
                        .addContainerGap())))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rbtn_darkMode)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_logo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_times, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(lbl_selectedBed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_type)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_cost)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_floor)
                        .addGap(29, 29, 29)
                        .addComponent(btn_reserveBed, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panel);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    void UpdateBedInfo() {
        if (cb_roomBed.getSelectedIndex() >= 0) {                                                                       //Seçilen index 0 a büyük veya eşitse if bloğu çalışır.
            int bed = Integer.parseInt(cb_roomBed.getSelectedItem().toString());                                        //int tipinde bed değişkeni tanımladım.
                                                                                                                        //Bunu da combobox dan seçilen itemin to stringini alıp inte parse ederek eşitledim.                                                                                                                  
            String bedinfo = Database.GetString("SELECT CONCAT(type,'-',floor,'-',cost) FROM Bed WHERE id=" + bed);
                                                                                                                       //info adında array oluşturup bunun içerisine                                                   
            String[] info = bedinfo.split("-");                                                                        //üst tarafta oluşturduğum stringteki "-" işaretini split ederek yani işareti gördüğü an işarete kadar olan kısmı
                                                                                                                       //arraye bir eleman olarak atar, bu bilgileri info adlı array e kaydediyorum.
                                                                                                                       //bu bilgiler sırasıyla type, floor ve cost.
                                                                                                                       //sırasıyla 0.indeksi type, 1.indeksi floor ve 2.indeksi cost olacak.
            lbl_type.setText("Type: " + info[0]);                                                                      //setTextlerle bu bilgileri de ekrana yazdırmış oluyorum.
            lbl_floor.setText("Floor: " + info[1]);
            lbl_cost.setText("Daily Cost: " + info[2]);

        } else {
            JOptionPane.showMessageDialog(null, "Please select a bed");                                                //Eğer comboboxtan bir seçim yapılmadıysa da else bloğu çalışır.
        }                                                                                                              //"Lütfen yatak seçiniz" uyarısı verilir.
    } 

    private void btn_reserveBedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reserveBedActionPerformed

        if (cb_roomBed.getSelectedIndex() >= 0 && cb_patients.getSelectedIndex() >= 0) {                               //Eğer bed ve patient comboboxının indeksi 0 veya 0'dan büyükse if bloğu çalışır.
            try {                                                                                                      //Seçimler yapılıp reserve butonuna tıklandığında kaç gün şeklinde bi showınput karşımıza çıkacak.
                int days = Integer.parseInt(JOptionPane.showInputDialog("How many days?"));                            //Kullanıcının isteğine göre gün sayısı girilir. String olarak girildiği için integer a parse edilir.
                int bed = Integer.parseInt(cb_roomBed.getSelectedItem().toString());                                   //int tipinde bed değişkeni tanımladım.
                                                                                                                       //Bunu da combobox dan seçilen itemin to stringini alıp inte parse ederek eşitledim. 
                int patient = Integer.parseInt(cb_patients.getSelectedItem().toString().split("-")[0]);                //int tipinde patient değişkeni tanımladım.
                                                                                                                       //Bunu da combobox dan seçilen itemin to stringini alıp "-" işaretinden sonra split edip 0.indekse verip inte parse ederek eşitledim. 
                float bedcost = Float.parseFloat(Database.GetString("SELECT cost FROM Bed WHERE id=" + bed)) * days;   //float tipinde bir cost değişkeni tanımladım.
                                                                                                                       //Bunu da database imin getString metoduyla cektim.(Bed datasındaki cost bilgilerini getiririm
                                                                                                                       //daha sonra bunu days ile çarparak total fiyatı bulurum.
                Database.RunCommand("INSERT INTO Payment(patientid,bedid,days,total) VALUES(" + patient + "," + bed + "," + days + "," + bedcost + ")");
                                                                                                                       //INSERT INTO ile yeni bir kayıt ekler, ancak yalnızca belirli sütunlara veri ekler.
                                                                                                                       //Değerlerini üst tarafta tanımladığımız değişkenlerden alır.
                Database.ShowTable("SELECT CONCAT(p.name,' ',p.surname) as name,p.age,b.type,b.floor,pay.days,pay.total FROM "
                        + "Payment pay INNER JOIN Patient p ON p.id = pay.patientid INNER JOIN Bed b ON b.id = pay.bedid",
                        new String[]{"Patient", "Patient Age", "Bed Type", "Floor", "Days", "Payment"}, table_reservations, 6);
                                                                                                                        //CONCAT ile patientsin name ve surnameni birleştirip "AS" ile bu birleşmiş halinin kısaltılmış ismini name verdim.
                                                                                                                        //bu veriler payment dan alınıyor (FROM Payment pay)
                                                                                                                        //INNER JOIN ile patient e p diyerek patientin id sini pay.patientid ye eşitledim.
                                                                                                                        //INNER JOIN ile bed e b diyerek bedin id sini pay.bedid ye eşitledim 
                                                                                                                        //ve daha sonra string tipinde array oluşturup sütunlara vereceğim isimleri belirleyip
                                                                                                                        //yukarıda databaseden çektiğim bilgileri table_reservationa kaydettim.
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Invalid input");                                                   //"Geçersiz giriş" uyarısı alınır.
            } 
        } else {
            JOptionPane.showMessageDialog(null, "Please select a bed and patient");                                     //Eğer bed ve patient comboboxının biri veya ikisi de seçilmediyse "lütfen seçiniz" uyarısı alınacak.
        }

    }//GEN-LAST:event_btn_reserveBedActionPerformed

    private void cb_roomBedİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_roomBedİtemStateChanged
        UpdateBedInfo();
    }//GEN-LAST:event_cb_roomBedİtemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();                                                                                                 //Penceredeki x işaretine basıldığında bütün framelerin değil de sadece tıkladığım framein
                                                                                                                        //kapanmasını, diğer açılan framelerin kapanmamasını önlemek için de windowClosing'i kullandım.
    }//GEN-LAST:event_formWindowClosing

    private void btn_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filterActionPerformed
        cb_patients.removeAllItems();                                                                                  //ComboBox un itemleri boşaltılır.
        for (String patient : patients) {                                                                              //for döngüsüyle patients arrayListi dolaşılır
            if (patient.contains(txt_patient.getText())) {                                                             //eğer bu arraylist girilen patient textini içeriyorsa if bloğu çalışır.
                cb_patients.addItem(patient);                                                                          //ve comboBoxa eklenir.
            }                                                                                                          //Mesela girdiğim text "Me " olsun. ComboBox ım bir sürü item içerebilir.
                                                                                                                       //Eğer comboBox ımda Melike, Meryem gibi isimler varsa bunlar "Me" textini içerdiği için
                                                                                                                       //if bloğu çalışacak.

        }
    }//GEN-LAST:event_btn_filterActionPerformed

    private void panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        if (evt.isPopupTrigger()) {                                                                                    //mouse a basıldığında
            showPopUp(evt);

        }
    }//GEN-LAST:event_panelMousePressed

    private void panelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseReleased
        if (evt.isPopupTrigger()) {                                                                                    //ve mouse bırakıldığında popup menü görünür olur.
            showPopUp(evt);
        }
    }//GEN-LAST:event_panelMouseReleased

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.dispose();                                                                                               //popUp menü ile frame kapatılır.
    }//GEN-LAST:event_exitActionPerformed

    private void mainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainActionPerformed
        this.dispose();                                                                                               //Bu frame kapanır ve ana menüye geri dönmek için 
        MainWindow mainWindow = new MainWindow();                                                                     //MainWindowdan main oluşturulur
        mainWindow.setVisible(true);                                                                                  //ve oluşturulan bu main framei görünür yapılır.
    }//GEN-LAST:event_mainActionPerformed

    private void rbtn_darkModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtn_darkModeActionPerformed
        if (rbtn_darkMode.isSelected()) {                                                                            //Eğer darkMode radio butonu seçildiyse if bloğu çalışır. 
            pnl_bed.setBackground(Color.BLACK);                                                                      //Panel ve butonların backgroundı siyah renge, tableın backgroundı ise gri renge set edilir.
            pnl_patient.setBackground(Color.BLACK);
            table_reservations.setBackground(Color.GRAY);
            jScrollPane1.setBackground(Color.BLACK);
            jSplitPane1.setBackground(Color.BLACK);
            panel.setBackground(Color.BLACK);
            ImageIcon icon = new ImageIcon("C:\\Users\\zeyne\\OneDrive\\Belgeler\\NetBeansProjects\\HospitalBedReservationSystem\\src\\acibadem_black_logo.png");
            lbl_logo.setIcon(icon);
        } else {                                                                                                    //Eğer darkMode radio butonu seçili değilse ele bloğu çalışır. 
            panel.setBackground(Color.WHITE);                                                                       //Panel, buton ve tableın renkleri eski renklerine set edilir.
            pnl_bed.setBackground(Color.WHITE);
            pnl_patient.setBackground(Color.WHITE);
            table_reservations.setBackground(Color.WHITE);
            jScrollPane1.setBackground(Color.WHITE);
            jSplitPane1.setBackground(Color.WHITE);
            ImageIcon icon = new ImageIcon("C:\\Users\\zeyne\\OneDrive\\Belgeler\\NetBeansProjects\\HospitalBedReservationSystem\\src\\acibadem_white_logo.jpg");
            lbl_logo.setIcon(icon);
        }    }//GEN-LAST:event_rbtn_darkModeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationWindow().setVisible(true);
                try {
                    Database.Initialize();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_filter;
    private javax.swing.JButton btn_reserveBed;
    private javax.swing.JComboBox<String> cb_patients;
    private javax.swing.JComboBox<String> cb_roomBed;
    private javax.swing.JMenuItem exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lbl_cost;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_floor;
    private javax.swing.JLabel lbl_logo;
    private javax.swing.JLabel lbl_selectedBed;
    private javax.swing.JLabel lbl_times;
    private javax.swing.JLabel lbl_type;
    private javax.swing.JMenuItem main;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel pnl_bed;
    private javax.swing.JPanel pnl_patient;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JRadioButton rbtn_darkMode;
    private javax.swing.JTable table_reservations;
    private javax.swing.JTextField txt_patient;
    // End of variables declaration//GEN-END:variables
}
